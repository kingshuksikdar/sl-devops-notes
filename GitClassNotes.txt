###############################
##Git Class Notes
###############################

Agenda

- Why SCM/VCS?
- Distributed vs Centralized
- Git Introduction
- Installation and Configuration
- Standard Operations in Git => Git Commands

Why SCM/VCS?
  - Versioning
  - Collaboration  --- :ks - multiple developers can contribute
  - Automated Backups ---:ks- back up can be taken from different machines if ur ma/c goes down
  - branching capabilities -- :ks  release management, each branch changes will not affect others
  - Auditing (investigation) -- :ks -each commit cn be identified,who has done chnages, when changes are done.

note:ks: Now a days devops engineer is using to store pupest manifest files, ansible playbooks etc.
Repository? -- :ks - its folder which mutiple files / folder

ApplicationA => repository AppA => repo
ApplicationB  => repository AppB


Types of VCS:
  Local (FileSystem)          => SCCS, RCS :ks - collaboration is not possible.
  Centralized (Client-Server) => SVN, TFS, Accurev, Perforce :ks local machine is connected to server :ks(lock, modify, unlock), only one person can collaborate 1 at a time, u have to connected to server
  Distributed                 => Git, Mercurial, Bazaar:ks local copy created for dev. SErver connection is needed only at cloning. Rest of the time dev. can work isolately



Distributions or Flavors
Inventor of Linux => Linus Torvalds

Linux => Redhat / Ubuntu / Debian (MIT / Apache 2.0)
Git => GitLab / GitHub / BitBucket / Stash / gitlist / Gitsmart / Git Kraken
Git-as-a-Service

Public Repository
Private Repository

===============================
Installation
===============================
Official Page: https://git-scm.com/  :ks git installation

Installation Commands:

sudo apt-get install git (## on Ubuntu)
sudo yum install git (## on CentOS or RHEL)

For Windows or Mac, follow instructions on the Official Git page.

root@master:~# git --version
git version 2.7.4

Author profile setup:
git config --global user.email "you@example.com"
git config --global user.name "Your Name"
git config --list :ks -- list the author

===============================
Git Commands
===============================
git init => initialize a new git repo, :ks .git folder -- has folders lie hooks, branches etc.
git status
git add . => tracking the files (also known as staging)
git commit -a -m "your commit message"
  -a => add/stage
  -m => commit message
git log
git clone https://github.com/sk12k/sl-docs-june-2019.git
git push
git pull   :ks - by default it will take remote which is used during git clone
git pull <remotename> <branchname>  :ks - origin = remote 
git pull origin master
git remote
git remote -v
git remote add <remotename> <remoteURL>
Pull vs Clone => Clone is first time, Pull/Push is for subsequent operations to keep your repository in sync.
Pull = Fetch + Merge

=======================
Branching and Merging
=======================

Why Branching?
  - Parallel Development
  - Isolated Sandboxed environments for Coding and Development

Commands:
git branch          => to see all the existing branches  :ks - * denotes current branch name
git branch fa       => Create a new branch with name "fa" :ks - all thing from mater is copied to fa 
git checkout fa     => Switch to branch "fa"
git checkout -b fa  => create a new branch by name "fa" and switch to it.

## Merge fa branch with Master
git checkout master
git merge fa  : ks - merging changesfrom fa to master

## Merge Master with FA branch
git checkout fa
git merge master


## Clone a Specific branch from remote repo:

Syntax:
git clone -b <branch> <remote_repo>
Example:
git clone -b fa https://github.com/sk12k/sl-docs-june-2019.git

=================
Merge Conflicts
=================
<<<<<<< HEAD
this line was added in master branch
=======
This line was added in fa branch
>>>>>>> fa


** Always do git pull first before you push your changes!!


==============================
Linux commands to familiarize:
==============================

  - touch
  - echo
  - cd
  - ll (ls -al)
  - mkdir
  - cat
  - pwd


==============================
References:
==============================


https://git-scm.com/book/en/v2
https://www.atlassian.com/git/tutorials/advanced-overview
https://www.atlassian.com/git/tutorials/saving-changes/git-stash
http://gitimmersion.com/
https://www.git-tower.com/learn/
http://rogerdudler.github.io/git-guide/

.
